datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// https://next-auth.js.org/schemas/adapters#prisma-schema
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  workspaces    WorkspaceUser[]

  @@map(name: "users")
}

model WorkspaceUser {
  id            Int        @id @default(autoincrement())
  role          WorkspaceUserRole       @default(USER)
  userId        Int        @map(name: "user_id")
  user          User       @relation(fields: [userId], references: [id])
  workspaceId   Int        @map(name: "workspace_id")
  default       Boolean    @default(false)
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
}

model Workspace {
  id            Int       @id @default(autoincrement())
  name          String?
  users         WorkspaceUser[]
  projects      WorkspaceProject[]
  image         String?
  githubOrgId   String?   @unique @map(name: "github_org_id")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
}

model WorkspaceProject {
  id            Int       @id @default(autoincrement())
  name          String
  setup         WorkspaceProjectSetup[]
  stats         WorkspaceProjectStats[]
}


model WorkspaceProjectSetup {
  id            Int                @id @default(autoincrement())
  key           String             @default(cuid())
  projectId     Int                @map(name: "project_id")
  project       WorkspaceProject   @relation(fields: [projectId], references: [id])
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  lastUsedAt      DateTime?  @map(name: "last_used_at")
}


model WorkspaceProjectStats {
  id            Int       @id @default(autoincrement())
}

enum WorkspaceUserRole {
  USER
  ADMIN
}
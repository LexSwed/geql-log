/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./schema/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  WorkspaceUserWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    id: number; // Int!
    image?: string | null; // String
    name?: string | null; // String
  }
  Workspace: { // root type
    id: number; // Int!
    image?: string | null; // String
    name?: string | null; // String
  }
  WorkspaceUser: { // root type
    id: number; // Int!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  WorkspaceUserWhereUniqueInput: NexusGenInputs['WorkspaceUserWhereUniqueInput'];
  Role: NexusGenEnums['Role'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createWorkspace: NexusGenRootTypes['WorkspaceUser']; // WorkspaceUser!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string | null; // String
    id: number; // Int!
    image: string | null; // String
    name: string | null; // String
    workspaces: NexusGenRootTypes['WorkspaceUser'][]; // [WorkspaceUser!]!
  }
  Workspace: { // field return type
    id: number; // Int!
    image: string | null; // String
    name: string | null; // String
  }
  WorkspaceUser: { // field return type
    id: number; // Int!
    role: NexusGenEnums['Role']; // Role!
    user: NexusGenRootTypes['User']; // User!
    workspace: NexusGenRootTypes['Workspace']; // Workspace!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createWorkspace: { // args
      name: string; // String!
    }
  }
  User: {
    workspaces: { // args
      after?: NexusGenInputs['WorkspaceUserWhereUniqueInput'] | null; // WorkspaceUserWhereUniqueInput
      before?: NexusGenInputs['WorkspaceUserWhereUniqueInput'] | null; // WorkspaceUserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "User" | "Workspace" | "WorkspaceUser";

export type NexusGenInputNames = "WorkspaceUserWhereUniqueInput";

export type NexusGenEnumNames = "Role";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}